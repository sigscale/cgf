@copyright 2024 - 2025 SigScale Global Inc.
@version %VERSION%
@title %DESCRIPTION%
@reference <a href="https://webapp.etsi.org/key/key.asp?GSMSpecPart1=32&amp;GSMSpecPart2=240">
3GPP TS 32.240</a> Charging architecture and principles.
@reference <a href="https://webapp.etsi.org/key/key.asp?GSMSpecPart1=32&amp;GSMSpecPart2=297">
3GPP TS 32.297</a> Charging Data Record (CDR) file format and transfer.
@reference <a href="https://webapp.etsi.org/key/key.asp?GSMSpecPart1=32&amp;GSMSpecPart2=298">
 3GPP TS 32.298</a> Charging Data Record (CDR) parameter description.
@doc This application implements the 3GPP Charging Gateway Function (CGF).

==Table of Contents==
<ul>
	<li><a href="#Intoduction">Introduction</a><br /></li>
	<li><a href="#Installation">Installation</a><br /></li>
	<li><a href="#Operation">Operation</a><br /></li>
	<li><a href="#Configuration">Configuration</a><br /></li>
</ul>

==Introduction==
The 3GPP reference architecture for the charging domain includes
the functions:
<ul>
	<li>Charging Trigger Function (CTF)</li>
	<li>Charging Data Function (CDF)</li>
	<li>Charging Gateway Function (CGF)</li>
</ul>
<img class="diagram" alt="3GPP Charging Architecture"
		src="3gpp-architecture.svg" />

==Installation==
It is necessary to initialize {@link //mnesia. mnesia} tables prior
to starting the application:
```
user@host:~$ sudo -iu otp
otp@host:~$ ERL_LIBS=lib erl -sname cgf -config releases/cgf-%VERSION%/sys
(cgf@host)1> cgf_app:install().
(cgf@host)2> q().
'''

==Operation==

===SFTP===
The default directory for SSH key management is `~/ssh'. On installation
a complement of server host keys are created in `~/ssh/system/'. Client
user keys are created in `~/ssh/user/<USERNAME>'. Keys may be created
with <a href="https://man.openbsd.org/ssh-keygen.1">`ssh-keygen'</a>
however a script is provided which simplifies adding new users:
```
otp@host:~$ ssh_keys bob carol ted alice
'''
Select a key pair for an algorithm supported by the client
(e.g. `~/ssh/user/alice/id_rsa') and share it with the user.
Alternatively the user may generate their own key and provide only
the public key (i.e. `id_rsa.pub') in which case you should copy it
to the user's diectory (e.g. `~/ssh/user/alice/id_rsa.pub') and add
it to the `authorized_keys' file:
```
user@host:~$ sudo -iu otp
otp@host:~$ mkdir ssh/user/alice
otp@host:~$ mv id_rsa.pub ssh/user/alice/
otp@host:~$ cat ssh/user/alice/id_rsa.pub >> ssh/user/alice/authorized_keys
'''
In either case you will also need to create a subdirectory, of the
`root' directory defined for `sftpd', with the same name as the
username.

===Automation===
Automated pipeline processing of CDR files received through SFTP
is enabled through event notifications with a managed table of event
matching patterns and associated actions. The following example will
provision event handlers for received ASN.1 format CDR files where
the directory name (i.e. "TAP") is matched for selecting the import
module (i.e. `cgf_tap_fsm') which will parse and log the CDRs.
```
(cgf@host)1> cgf:add_action(file_close, {"", "/TAP/", "", ""}, {import, {cgf_tap_fsm, bx_tap}}).
(cgf@host)2> cgf:add_action(file_close, {"", "/SGSN/", "", ""}, {import, {cgf_gprs_fsm, bx_ps}}).
(cgf@host)3> cgf:add_action(file_close, {"", "/MSC/", "", ""}, {import, {cgf_cs_fsm, bx_cs}}).
(cgf@host)4> cgf:add_action(file_close, {"", "/IMS/", "", ""}, {import, {cgf_ims_fsm, bx_ims}}).
'''
The CDR may be received in archive and/or compressed files. The
following example adds preprocessing for some of these use cases.
```
(cgf@host)5> cgf:add_action(file_close, {"", "/", "TAP", "tgz"}, {untar, {<<"^(TAP.*)\\.tgz$">>, <<"TAP/\\1">>}}).
(cgf@host)6> cgf:add_action(file_close, {"", "/", "SGSN", "zip"}, {unzip, {<<"^(SGSN.*)\\.zip$">>, <<"SGSN/\\1">>}}).
(cgf@host)7> cgf:add_action(file_close, {"", "/", "MSC", "zip"}, {unzip, {<<"^(MSC.*)\\.zip$">>, <<"MSC/\\1">>}}).
(cgf@host)8> cgf:add_action(file_close, {"", "/", "IMS", "gz"}, {gunzip, {<<"^(IMS.*)\\.gz$">>, <<"IMS/\\1">>}}).
'''

==Configuration==
System wide settings in the {@link //cgf. cgf} application may be
configured using the following application environment variables
(`~/releases/cgf-<VERSION>/sys.config').

===SFTP===
Application environment variables configuring instances of the
{@link //ssh. ssh} application subsystem for `sftp':
<dl>
	<dt>`sftpd'</dt>
		<dd>Defines SFTP services as `[{Addr, Port, DaemonOptions, SftpdOptions}]'.
				Each set of local bind address (`Addr :: inet:ip_address()'),
				port (`Port :: 0..65535'), daemon options
				(`DaemonOptions :: ssh:daemon_options()') and `sftp' options
				(`SftpdOptions :: cgf_sftpd:options()')
				define an SFTP service. (default: `[]')</dd>
</dl>
The `DaemonOptions' allow complete control over the `ssh' application and
underlying transport, however an empty list (`[]') is all that is
normally required.  The `SftpdOptions' are the `sftp' subsystem options
broken out for convenience (e.g. `[{root, "/var/spool/cgf"}]'):
<dl>
	<dt>`cwd'</dt>
		<dd>Sets the initial current working directory for the server.
				(default: `/')</dd>
	<dt>`root'</dt>
		<dd>Sets the SFTP server root directory. Username subdirectories
				of the server root directory provide the root directory
				as seen by each SFTP user. (default: `/tmp')</dd>
	<dt>`max_files'</dt>
		<dd>The maximum number of files in the response to a directory listing.
				(default: `0' which is unlimited).</dd>
</dl>

===Mediation===
Application environment variables configuring mediation of CDR files:
<dl>
	<dt>`max_action'</dt>
		<dd>Sets the maximum number of actions resulting from
				an initial event to prevent looping. (default: `5')</dd>
	<dt>`max_action_import'</dt>
		<dd>Sets the maximum number of concurrent
				{@link //cgf/cgf_import_fsm. cgf_import_fsm} workers
				after which start requests will be queued.  (default: `100')</dd>
	<dt>`max_action_memory'</dt>
		<dd>Sets the maximum total memory size allocated by the
				Erlang emulator after which start requests will be queued.
				(default: `68719476736' (64GB))</dd>
</dl>

